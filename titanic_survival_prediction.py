# -*- coding: utf-8 -*-
"""Titanic Survival Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e9u1LaLgDdESgBUKiYRxxhJAljhDPdLm

Importing dependencies
"""

import numpy as numpypkg
import pandas as pandaspkg
import matplotlib.pyplot as matpltpkg
import seaborn as sbpkg
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# load data from csv file to pandas DataFrame
titanicData = pandaspkg.read_csv('/content/train.csv')

# printing first 5 rows of DataFrame
titanicData.head()

# number of rows and Columns
titanicData.shape

# getting some informations about the data
titanicData.info()

# check number of missing values in each column
titanicData.isnull().sum()

"""Handling Missing values"""

# drop "Cabin" column from DataFrame
titanicData = titanicData.drop(columns='Cabin', axis=1)

# replacing missing values in "Age" column with mean value
titanicData['Age'].fillna(titanicData['Age'].mean(), inplace=True)

# finding mode value of "Embarked" column
print(titanicData['Embarked'].mode())

print(titanicData['Embarked'].mode()[0])

# replacing the missing values in "Embarked" column with mode value
titanicData['Embarked'].fillna(titanicData['Embarked'].mode()[0], inplace=True)

# check the number of missing values in each column
titanicData.isnull().sum()

"""Data Analysis"""

# getting some statistical measures about data
titanicData.describe()

# finding the number of people survived and not survived
titanicData['Survived'].value_counts()

"""Data Visualization"""

sbpkg.set()

# making a count plot for "Survived" column
sbpkg.countplot('Survived', data=titanicData)

titanicData['Sex'].value_counts()

# making a count plot for "Sex" column
sbpkg.countplot('Sex', data=titanicData)

# number of survivors Gender wise
sbpkg.countplot('Sex', hue='Survived', data=titanicData)

# making a count plot for "Pclass" column
sbpkg.countplot('Pclass', data=titanicData)

sbpkg.countplot('Pclass', hue='Survived', data=titanicData)

titanicData['Sex'].value_counts()

titanicData['Embarked'].value_counts()

# converting categorical Columns
titanicData.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanicData.head()

"""Separating features and target"""

A = titanicData.drop(columns = ['PassengerId','Name','Ticket','Survived'],axis=1)
B = titanicData['Survived']

print(A)

print(B)

"""Splitting data into training data & Test data"""

A_train, A_test, B_train, B_test = train_test_split(A,B, test_size=0.2, random_state=2)

print(A.shape, A_train.shape, A_test.shape)

"""Model Training

Logistic Regression
"""

modelTrained = LogisticRegression()

# training the Logistic Regression model with training data
modelTrained.fit(A_train, B_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
A_train_prediction = modelTrained.predict(A_train)

print(A_train_prediction)

trainingDataAccuracy = accuracy_score(B_train, A_train_prediction)
print('Accuracy score of training data : ',trainingDataAccuracy)

# accuracy on test data
A_test_prediction = modelTrained.predict(A_test)

print(A_test_prediction)

test_data_accuracy = accuracy_score(B_test, A_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)

